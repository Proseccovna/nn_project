import numpy as np
import pandas as pd

import matplotlib as mpl
import matplotlib.pyplot as plt
import torch
import streamlit as st
import plotly_express as px
from plotly.tools import mpl_to_plotly
import io
import imageio
import requests
from PIL import Image
from torchvision import transforms as T
from torchvision.models import resnet34, resnet18
# from torchvision import io
import torch.nn as nn
import time



model = resnet34()
model.fc = nn.Linear(512, 11)
device = 'cpu'
model.load_state_dict(torch.load('best_params_resnet34.pt',  map_location=torch.device('cpu')))
func_preprocess = T.Compose([
    T.Resize((224, 224)),
    T.ToTensor()
])
def preprocess(image: str):
    return func_preprocess(image)
def get_prediction(image) -> str:
    dict_classes = {0: 'dew',
        1: 'fogsmog',
        2: 'frost',
        3: 'glaze',
        4: 'hail',
        5: 'lightning',
        6: 'rain',
        7: 'rainbow',
        8: 'rime',
        9: 'sandstorm',
        10: 'snow'}
  
    image = preprocess(image)
    device = 'cpu'
    model.to(device)
    model.eval()
    classes = (torch.argmax(model(image.unsqueeze(0).to(device)), dim=1)).item()
    
    return f'–ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–ª–∞: {dict_classes[classes]}'

# model2 = resnet18()
# model.fc = nn.Linear(INPUT_SIZE, 200)
# model.load_state_dict(torch.load('–í–ï–°–ê–ê–ê–ê–ê–ê–ê–ê'))
# func_preprocess2 = T.Compose([
#     T.Resize((224, 224)),
#     T.ToTensor()
# ])
# def preprocess(image2: str):
#     return func_preprocess2(image2)
# def get_prediction(image) -> str:
#     dict_classes = {}
  
#     image2 = preprocess(image2)
#     device = 'cpu' 
#     model2.to(device)
#     model2.eval()
#     classes2 = (torch.argmax(model(image.unsqueeze(0).to(device)), dim=1)).item()
    
#     return f'–ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–ª–∞: {dict_classes[classes2]}'


st.title('–ü—Ä–æ–µ–∫—Ç ‚Ä¢ –í–≤–µ–¥–µ–Ω–∏–µ –≤ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏')

st.sidebar.header('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É')
page = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É", ["–ì–ª–∞–≤–Ω–∞—è", "–í—Ä–µ–º–µ–Ω–∞ –≥–æ–¥–∞", "–ö—Å—Ç–∞—Ç–∏, –æ –ø—Ç–∏—á–∫–∞—Ö", "–ò—Ç–æ–≥–∏"])

if page == "–ì–ª–∞–≤–Ω–∞—è":
        st.header('–í—ã–ø–æ–ª–Ω–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞ "DenseNet":')
        st.subheader('üê±–†—É—Å–ª–∞–Ω')
        st.subheader('üê±–¢–∞—Ç–∞')

        st.header(" üåü " * 10)

        st.header('–ù–∞—à–∏ –¥–∞—Ç–∞—Å–µ—Ç—ã')
        st.subheader('*–ó–∞–¥–∞—á–∞ ‚Ññ1*: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–∏—Ä–æ–¥—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∞–º –≥–æ–¥–∞ (–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç–∞—Å–µ—Ç–∞ *Weather Image Recognition*)')

        st.subheader('*–ó–∞–¥–∞—á–∞ ‚Ññ2*: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏–¥–∞ –ø—Ç–∏—á–∫–∏ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.')


elif page == "–í—Ä–µ–º–µ–Ω–∞ –≥–æ–¥–∞":

        image_url = st.text_input("–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã")
        start_time = time.time()

        if image_url:
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å—Å—ã–ª–∫–µ
                response = requests.get(image_url)
                image = Image.open(io.BytesIO(response.content))
                st.subheader('–í–∞—à–µ —Ñ–æ—Ç–æ')
                st.image(image)
                st.subheader('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏')
                st.write(get_prediction(image))
                st.subheader('–í—Ä–µ–º—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è')
                st.subheader(time.time() - start_time)
                st.header('üéà' * 10)

 
                        
                 
elif page == "–ö—Å—Ç–∞—Ç–∏, –æ –ø—Ç–∏—á–∫–∞—Ö":
        st.subheader("")
        st.markdown("")
        image_url3 = st.text_input("–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞—à–µ–π –ø—Ç–∏—á–∫–∏")

        if image_url3:
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å—Å—ã–ª–∫–µ
                response3 = requests.get(image_url3)
                image3 = Image.open(io.BytesIO(response3.content))
                st.subheader('–§–æ—Ç–æ –≤–∞—à–µ–π –ø—Ç–∏—á–∫–∏')
                st.image(image3)
                st.subheader("–ú—ã —É–∑–Ω–∞–ª–∏, —á—Ç–æ —ç—Ç–æ –∑–∞ –ø—Ç–∏—á–∫–∞")
                #–ù–ê–® –ö–û–î
elif page == "–ò—Ç–æ–≥–∏":
        st.subheader('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≤—ã–≤–æ–¥—ã')
        #–†–ê–°–°–ö–ê–ó –û –¢–û–ú, –ö–ê–ö –ù–ê–ú –ë–´–õ–û –¢–Ø–ñ–ï–õ–û, –ù–û –ú–´ –°–ü–†–ê–í–ò–õ–ò–°–¨






